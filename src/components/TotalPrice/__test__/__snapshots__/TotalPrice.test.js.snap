// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`测试价格汇总组件 匹配组件快照 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TotalPrice
    total_expense={800}
    total_income={1000}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        "Income",
        ": ",
        <span
          id="income"
        >
          1000
        </span>,
        " ",
        "Yuan",
        <span
          style={
            Object {
              "marginRight": "20px",
            }
          }
        />,
        "Expense",
        ": ",
        <span
          id="expense"
        >
          800
        </span>,
        " ",
        "Yuan",
      ],
    },
    "ref": null,
    "rendered": Array [
      "Income",
      ": ",
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": 1000,
          "id": "income",
        },
        "ref": null,
        "rendered": 1000,
        "type": "span",
      },
      " ",
      "Yuan",
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "style": Object {
            "marginRight": "20px",
          },
        },
        "ref": null,
        "rendered": null,
        "type": "span",
      },
      "Expense",
      ": ",
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": 800,
          "id": "expense",
        },
        "ref": null,
        "rendered": 800,
        "type": "span",
      },
      " ",
      "Yuan",
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          "Income",
          ": ",
          <span
            id="income"
          >
            1000
          </span>,
          " ",
          "Yuan",
          <span
            style={
              Object {
                "marginRight": "20px",
              }
            }
          />,
          "Expense",
          ": ",
          <span
            id="expense"
          >
            800
          </span>,
          " ",
          "Yuan",
        ],
      },
      "ref": null,
      "rendered": Array [
        "Income",
        ": ",
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": 1000,
            "id": "income",
          },
          "ref": null,
          "rendered": 1000,
          "type": "span",
        },
        " ",
        "Yuan",
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "style": Object {
              "marginRight": "20px",
            },
          },
          "ref": null,
          "rendered": null,
          "type": "span",
        },
        "Expense",
        ": ",
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": 800,
            "id": "expense",
          },
          "ref": null,
          "rendered": 800,
          "type": "span",
        },
        " ",
        "Yuan",
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
